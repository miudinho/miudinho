repozyterium - historia wszystkich zmian, relacje miedzy kommitami/strukturami/
commit = snapshot - zapisanie stanu repo/projektu

staging / indeks = przechowywalnie , oczekiwalnia na commit 
git folder - repozytorium, katalog przechowujacy repozytorim

katalog roboczy -> git add -A -> poczekalnia(indeks) -> git commit -> repozytorium
repozytorium = .git/objects

4 stany
niesledzoeny - utworzenie nowego pliku
sledzony niezmienion - dodany do repo i zmienione ( od ostatniego commita )
sledzony zmodyfikowany - w repo i zmieniony ( w folderze roboczym )
w poczekalni ( git add ) - oczekuje na commita

git status
git log git log--online
git diff
git log git log--online git log --stat
git diff - roznica w plikach w w katalogo roboczym a to co w indexie(stagingu)
git add . / -a / -all 
git commit -a -m   -a wszystkie sledzone kommituje, nie stagowanych "add owanych" nie 

git show 
git rm plik - usuwa z kat roboczego i indeksu
git rm --ceched pli - usuwa z indeksu
git mv plik nowy_plik
git checkout -- plik - przywracania wersja z poprzedniego commitu / np usuwam wpis/modyfikuje - checkout to taki rollback
git reset 
git checkout -- plik - przywracania z indeksu  / np usuwam wpis/modyfikuje - checkout to taki rollback np git checkout -- *.txt git checkout HEAD -- plik przywracanie z ostatniego commita , git checkout commit_id 
git reset - usuwa pliki ze stagingu ( sa nadal sledzone ) przywracanie do stanu po ostatnim kommicie ( wszystko w staging area ) juz sie tu nie znajduje
git clone source dest
git commit -amend - zmiana ostatniego komentarza 
w pliku .gitignore sa niesledzone pliki. Plik ktory jest sledzony/stagingowany nie moze zostac dodany do .gitignore - to nie zadziala
git commit --amend  zmiana ostatniego komenta 
git cat-file -p object_file_namehash_object(.gitconfig/objects/project_file_name
             -t (type)
git nie tworzy obiektu ( w swoim repo ) pod wzgledem pliku tylko zawartosci czyli np dwa pliki o roznych nazwach ale tej samej zawartosci maja jeden wpis w repo(objects)
git hash-object file_name
git branch nazwa_galezi
git checkout nazwa_x_brancha - przelaczenie pomiedzy branch 
git merge nazwa_brncha - laczenie tej gdzie jestesmy ze wskazana 
git push - wysylamy nasze repo do glownego - aktualizacja 
git pull - sciagamy update z glownego repo ( git hub czy cos ) 
